<?lassoscript
//............................................................................
//
//	pageblocks: (c) 2002-2007 http://www.pageblocks.org/
//
//............................................................................
/*

	{fileName=		fwpActn_fmpUpdate.ctag }
	{rsrcType=		tag }
	{rsrcName=		fwpActn_fmpUpdate }
	{rsrcHTTP=		www.pageblocks.org/refc/fwpActn_fmpUpdate }

	{lassoVrsnMin=	8.1.0 }
	{lassoVrsnMax=	8.5.3 }

	{author=		Greg Willits }
	{authorEmail=	subscribe to pbTalk at www.pageblocks.org/talk/ }
	{authorHTTP=	www.pageblocks.org }

	{desc=			Updates a record in an FMP database. }

	{maintvsrn=		1.1 }
	{maintrelease=	5.1.0 }
	{maintdate=		2006-05-26 }
	{maintauthor=	Greg Willits }
	{maintnotes=	converted timers to fwp_timer ctype }

	{maintvsrn=		1.0 }
	{maintrelease=	5.0.0 }
	{maintdate=		2006-01-16 }
	{maintauthor=	Greg Willits }
	{maintnotes=	initial release }

*/
//............................................................................

define_tag:'fwpActn_fmpUpdate', -priority='replace',
	-optional='inlineName',
	-optional='db',
	-optional='tbl',
	-optional='keyfld',
	-optional='keyval',
	-optional='inputs',
	-optional='confirm',
	-optional='makevars',
	-optional='reactn',
	-optional='continue';

$fw_debugTimers ? $fw_timer->(start:'fmpTagUpdate');

local:
	'fw_actnInlineNm'	= @(local:'inlineName'),
	'fw_actnDb'			= @(local:'db'),
	'fw_actnTbl'		= @(local:'tbl'),
	'fw_actnKeyFld'		= @(local:'keyfld'),
	'fw_actnKeyVal'		=  (local:'keyval'),
	'fw_actnInputs'		=  (local:'inputs'),
	'fw_actnCnfrmFld'	=  (local:'confirm'),
	'fw_actnMakeVars'	= @(local:'makevars'),
	'fw_actnReactn'		= @(local:'reactn'),
	'fw_actnContinue'	= @(local:'continue');

//	don`t split these yet so we can use them in a SELECT
if:	#fw_actnCnfrmFld;
	#fw_actnCnfrmFld = (fwpCnfg_splitComma: #fw_actnCnfrmFld, -nosplit=true);
/if;

if:	#fw_actnInputs;
	#fw_actnInputs = (fwpCnfg_splitComma: #fw_actnInputs);
/if;

//	local variables generated within this include file 

//	fw_reactnInfo	- a custom type of various info to return as the action response
//	fw_usrName		- a name string to stamp the record with
//	fw_sqlActn 		- contains the constructed SQL statement string 
//	fw_r	 		- record no of the record being updated
//	fw_lockDelta	- time difference between now and when record was last locked
//	fw_lokInfo		- db, tbl, and fw_actnLock to go in a cookie for unlocking
//	fw_cookieNm		- name of the cookie that stores fw_lokInfo
//	fw_tableConfig	- the table definition file
//	fw_cnfgsFldr	- the folder wherethe table definition file is located

local:
	'fw_tableConfig'	= (fwp_tableConfig: #fw_actnDb),
	'fw_reactInfo'		= (fwp_collection),
	'fw_usrName'		= (string),
	'fw_usrRcrd'		= (string),
	'fw_lockDelta'		= (string),
	'fw_lokInfo'		= (string),
	'fw_fmpActionPairs'	= (array),
	'fw_fmpRcrdID'		= (string),
	'fw_thisItem'		= (string),
	'fw_indx'			= 0,
	'fw_r'				= (string),
	'fw_cookieNm'		= ($fw_gAppPrefix + '_lokInfo');


if: ((var:$fw_userVarName)->'loginValid') == 'Y';
	#fw_usrName = (var:$fw_userVarName)->(getProfile:'userName');
	#fw_usrRcrd = (var:$fw_userVarName)->(getProfile:'userRcrdID');
else;
	#fw_usrName = 'Anonymous';
	#fw_usrRcrd = 'Anonymous';
/if;

//	............................................................................

//	field-specific data validation stuff is located in an include named validate_{tableName}.lgc 
//	located in either the module`s libs folder or the global libs folder
//	if a validation error occurs, the error should be inserted into $fw_error

fwpFile_loadLibrary: ('validate_' + #fw_actnDb + fw_kLogicExt);


if: $fw_error->size > 0;

//	make sure there`s a rcrdNo, or data gets messed up 
//	return only the lock fields so we can also assess the record`s lock status 

if: #fw_actnKeyVal;

//	construct the statement
//	return only the lock fields so we can also assess the record`s lock status

	#fw_fmpActionPairs->(insert: (pair: #fw_actnKeyFld = ('==' + #fw_actnKeyVal)));

	if: $fw_gUseSubdomains;
		#fw_fmpActionPairs->(insert: (pair:'rcrdSubHost' = ('==' + $fw_requestPage->'subhost')));
	/if;

	if: $fw_debug;
		var:'api_fwpActn_fmpUpdate_getLock' = #fw_fmpActionPairs;
	/if;

	$fw_debugTimers ? $fw_timer->(start:'fmpQryUpdateLock');

	inline: 
		(#fw_fmpActionPairs),
		-search,
		-inlinename=#fw_actnInlineNm,
		-username=$fw_gQueryUser,
		-password=$fw_gQueryPswd,
		-database=#fw_actnDb,
		-layout='fwproRcrdFields';

		$fw_debugTimers ? $fw_timer->(stop:'fmpQryUpdateLock');

//	test for any Lasso errors, datasource problems, etc. 

			if: (found_count) > 0;
			
//	get FMP internal recordID (and fwpro rcrdNo for logging)

				#fw_r 			= field:'rcrdNo';
				#fw_fmpRcrdID	= keyfield_value;

//	convert field data to vars

				if: #fw_actnMakeVars;
					iterate: #fw_actnSlct, #fw_thisItem;
						#fw_indx = ((#fw_tableConfig->'fieldNames')->findindex:#fw_thisItem)->last;
						if: #fw_indx;
							var:((#fw_tableConfig->'inputNames')->get:#fw_indx) = field:((#fw_tableConfig->'fieldNames')->get:#fw_indx);
						/if;
					/iterate;
				/if;

//	let`s verify that the record is locked (it`s supposed to be)
//	and that the current session is the same one that locked the record.
//	fw_lock is esentially a session ID that the record was stamped with when it was locked
//	we also have to test that this update occurs before the alloted lockout time expires
//	otherwise another user may have accessed the record for updating 

				#fw_lockDelta=(Date_Difference: 
					(date), 
					(field:'rcrdLockTime'), 
					-minute);

				if: 
					((field:'rcrdLock') == 'Y') &&
					((field:'rcrdLockID') == #fw_actnKeyVal) &&
					((integer:#fw_lockDelta < integer:$fw_rcrdLockDelay));

//	all is good, let`s go ahead and update the record, but first
//	create the UPDATE pairs
//	starting with the standard FrameWork fields and values for an update
//	then adding the fields affected by the current form 

					#fw_fmpActionPairs = (array);

					#fw_fmpActionPairs->(insert: (pair:'rcrdModified'= (date_format: (date), -DateFormat='%Y-%m-%d %T')));
					#fw_fmpActionPairs->(insert: (pair:'rcrdModifiedBy' = #fw_usrName));
					#fw_fmpActionPairs->(insert: (pair:'rcrdLock'=''));
					#fw_fmpActionPairs->(insert: (pair:'rcrdLockTime'=''));
					#fw_fmpActionPairs->(insert: (pair:'rcrdLockOwnr'=''));
					#fw_fmpActionPairs->(insert: (pair:'rcrdLockID'=''));
					#fw_fmpActionPairs->(insert: (pair:'-keyvalue'=#fw_fmpRcrdID));

//	iterate through the input list
//	find the input name in the config data, and store the index position
//	use the index position to acquire the field name
//	insert a pair of the field name and the submitted form value

					if: $fw_debug;
						var:'api_fwpActn_fmpUpdate_inputNames' = (#fw_tableConfig->'inputNames');
					/if;
					if: $fw_debug;
						var:'api_fwpActn_fmpUpdate_inputs' = (#fw_actnInputs);
					/if;

					local:'thisInput' = (string);
					iterate: #fw_actnInputs, #thisInput;
						#fw_indx = ((#fw_tableConfig->'inputNames')->findindex:#thisInput)->last;

						if: #fw_indx && var_defined:((#fw_tableConfig->'inputNames')->get:#fw_indx);
							#fw_fmpActionPairs->(insert: (pair:((#fw_tableConfig->'fieldNames')->get:#fw_indx) = (var:(#fw_tableConfig->'inputNames')->get:#fw_indx)));
						/if;
					/iterate;

					if: $fw_gUseSubdomains;
						#fw_fmpActionPairs->(insert: (pair:'rcrdSubHost' = ('==' + $fw_requestPage->'subhost')));
					/if;

					if: $fw_debug;
						var:'api_fwpActn_fmpUpdate_pairs' = #fw_fmpActionPairs;
					/if;

//	perform the database action

					$fw_debugTimers ? $fw_timer->(start:'fmpQryUpdate');

					inline: 
						(#fw_fmpActionPairs),
						-update,
						-inlinename=#fw_actnInlineNm,
						-username=$fw_gQueryUser,
						-password=$fw_gQueryPswd,
						-database=#fw_actnDb,
						-layout=#fw_actnTbl;
						
						$fw_debugTimers ? $fw_timer->(stop:'fmpQryUpdate');


//	we completed the action, and there`s no need for the lock cookie, so delete it

						cookie_set:(#fw_cookieNm)='', -path='/';
//	log the action

						if: $fw_gLogDb;
							fwpLog_data: 
								-usrName=#fw_usrName,
								-usrRcrd=#fw_usrRcrd,
								-table=#fw_actnTbl,
								-rcrd=local:'fw_r',
								-action='update',
								-pageInfo=$fw_logPageInfo,
								-fwpInfo=$fw_logFWPInfo;
						/if;

//	verify that no lasso errors occured with the inline 

						if: !((error_currenterror: -errorcode) == 0);

							$fw_error->(insert:'5024' = ('Record could not be added due to Lasso error: ' + 
								(error_currentError) + ' (' + (error_currentError: -errorCode) + ')'));
						/if;
					/inline;

				else;
					$fw_error->(insert:'5112' = 
						('Could not validate record lock with ' +
						'lock=' + (field:'rcrdLock') + 
						', lockID=' + (field:'rcrdLockID') + 
						', fw_lock=' + $fw_lock + 
						', delta=' + #fw_lockDelta + 
						', delay=' + $fw_rcrdLockDelay + 
						'\r'));
				/if;

			else;

				if: (error_currenterror: -errorcode) == -1728;
					$fw_error->(insert:'5021' = 'Record number ' + #fw_actnKeyVal + ' not found in table ' + #fw_actnTbl);
				else;
					$fw_error->(insert:'5022' = ('Record could not be found due to Lasso error: ' + 
						(error_currentError) + ' (' + (error_currentError: -errorCode) + ')\r'));
				/if;
			/if;
		/inline;

	else;
		$fw_error->(insert:'5022' = 'Record number empty');
	/if;

else;
	//	the field validation include should have already built up the fw_error variable
	//	nothing else needs to be done here 
/if;


//	if requested, store data needed to build a response using data from the record

if: local_defined:'fw_actnReactn';

	if: #fw_actnCnfrmFld;
		#fw_actnCnfrmFld = #fw_actnCnfrmFld->split:',';
	/if;

	#fw_reactInfo=(fwp_collection:
		-type='update',
		-error=$fw_error,
		-again=referrer_url,
		-continue=#fw_actnContinue,
		-confirmFields=#fw_actnCnfrmFld,
		-inlineName=#fw_actnInlineNm);

	$fw_debugTimers ? $fw_timer->(stop:'actnUpdateAll');
	return: #fw_reactInfo;
/if;

$fw_debugTimers ? $fw_timer->(stop:'actnUpdateAll');

/define_tag;
?>