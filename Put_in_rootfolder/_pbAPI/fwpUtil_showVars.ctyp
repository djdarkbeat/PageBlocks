<?lassoscript//............................................................................////	pageblocks (c) 2002-2007  http://www.pageblocks.org/////............................................................................/*	{fileName=		fwpUtil_showVars.ctyp }	{rsrcType=		type }	{rsrcName=		fwp_showVars }	{rsrcHTTP=		www.pageblocks.com/refc/fwp_showVars }	{lassoVrsnMin=	8.1.0 }	{lassoVrsnMax=	8.5.3 }	{author=		Greg Willits }	{authorEmail=	subscribe to pbTalk at www.pageblocks.org/talk/ }	{authorHTTP=	www.fwpro.com }	{desc=			Writes formatted output of var data. }	{maintvsrn=		1.1.0 }	{maintrelease=	5.3.0 }	{maintdate=		2007-08-17 }	{maintauthor=	Greg Willits }	{maintnotes=	updated the headers display area to include	 				client headers }	{maintvsrn=		1.0.8 }	{maintrelease=	5.2.0 }	{maintdate=		2007-06-15 }	{maintauthor=	Greg Willits }	{maintnotes=	updated CSS }	{maintvsrn=		1.0.7 }	{maintrelease=	5.2.0 }	{maintdate=		2007-06-09 }	{maintauthor=	Greg Willits }	{maintnotes=	fixed bugin showValue that would crash if	 				data was a pair with a ctype as the second }	{maintvsrn=		1.0.6 }	{maintrelease=	5.2.0 }	{maintdate=		2007-06-09 }	{maintauthor=	Greg Willits }	{maintnotes=	added file_uploads to the excluded types list }	{maintvsrn=		1.0.5 }	{maintrelease=	5.1.5 }	{maintdate=		2007-03-22 }	{maintauthor=	Greg Willits }	{maintnotes=	improved output formatting for http headers }	{maintvsrn=		1.0.4 }	{maintrelease=	5.1.0 }	{maintdate=		2006-09-12 }	{maintauthor=	Greg Willits }	{maintnotes=	added client_browser as standard output to topvars }	{maintvsrn=		1.0.3 }	{maintrelease=	5.1.0 }	{maintdate=		2006-09-02 }	{maintauthor=	Greg Willits }	{maintnotes=	changed contains member tag to >> }	{maintvsrn=		1.0.2 }	{maintrelease=	5.1.0 }	{maintdate=		2006-05-30 }	{maintauthor=	Greg Willits }	{maintnotes=	fixed a bug in showVal if there was no value }	{maintvsrn=		1.0.1 }	{maintrelease=	5.1.0 }	{maintdate=		2006-05-28 }	{maintauthor=	Greg Willits }	{maintnotes=	removed dependence on fwpCnfg_splitComma }	{maintvsrn=		1.0 }	{maintrelease=	5.1.0 }	{maintdate=		2006-05-26 }	{maintauthor=	Greg Willits }	{maintnotes=	initial release }*///............................................................................define_type:'fwp_showVars', -prototype;	local:		'fw_topVars'	= array,		'fw_clearVars'	= array,		'indent'		= 0;//	identify lasso's built in data types here//	this is used to differentiate built-ins from custom data types//	which is used to decide how to format the var display		local:		'typesPrimitive' = (array:			'null', 'boolean', 'string', 'integer', 			'decimal', 'date', 'duration'),		'typesNoDisplay' = (array:			'bytes', 'image', 'file', 'net', 'file_uploads',			'xml_rpc', 'pdf', 'pdf_doc', 'java_bean'),		'typesCompound' = (array:			'pair', 'array', 'map', 'priorityQueue', 'queue',			'series', 'set', 'stack', 'treeMap', 'xml');//=============================================================================////	->onCreate////define_tag:'onCreate';//	convert incoming params to local vars of the same name//	made clearvars a pagevars so we can verify it easily	if: (params->find:'-clearvars')->size > 0;		var:'fw_clearvars' 		= ((params->find:'-clearvars')->get:1)->second;		(self->'fw_clearVars') 	= self->splitComma: $fw_clearvars;	/if;	if: (params->find:'-topvars')->size > 0;		local:'topvars' 		= ((params->find:'-topvars')->get:1)->second;		(self->'fw_topVars') 	= self->splitComma: #topvars;	/if;/define_tag;//=============================================================================////	->indentInc//	//	increases indenting of the current output line//	called internally only////define_tag:'indentInc';	(self->'indent') += 20;/define_tag;//=============================================================================////	->indentDec//	//	decreases indenting of the current output line//	called internally only//define_tag:'indentDec';	(self->'indent') -= 20;/define_tag;//=============================================================================////	->splitComma////	normalizes comma separated list//	and split into an array////define_tag:'splitComma',	-required = 'commaList',	-criteria = ((#commaList->type == 'string') || (#commaList->type == 'bytes'));	 #commaList = (string_replaceRegExp:		#commaList,		-find = '\\s*,\\s*',		-replace = ',');	#commaList = (#commaList->split:',');	return: #commaList;/define_tag;//=============================================================================////	->fw_showTopVars////	outputs vars defined to highlight at the top of the list//	called internally only////define_tag:'fw_showTopVars', -autooutput;	local:'thisvar' = string;	if: (self->'fw_topVars')->type == 'array';		'<h2>Notable Vars:</h2>\r';		iterate:(self->'fw_topVars'), #thisVar;			'<p class="debug">'; #thisVar; ' - '; var:#thisVar; '</p>\r';		/iterate;	/if;/define_tag;//=============================================================================////	->showAll////	outputs all vars (except lasso internal vars)//	called by programmer wherever this display is desired////define_tag:'showAll', -autooutput;	local:'fw_thisVar' = string;	self->fw_showTopVars;	local:'fw_httpHeader' = $__http_header__;	#fw_httpHeader->trim;	#fw_httpHeader->(replace:'\r\n','<br />');	'<br /><p><strong>HTTP Header: <br /></strong>'; #fw_httpHeader '</p>';	local:'fw_clientHeader' = client_headers;	#fw_clientHeader->trim;	#fw_clientHeader->(replace:'\r\n','<br />');	'<br /><p><strong>Client Header: <br /></strong>'; #fw_clientHeader '</p>';	'<h2>Page Variables:</h2>\r';//	loop is used because (vars) cannot be iterated//	and rather than duplicate the entire vars data set,//	we`ll settle for using loop instead of iterate//	we pass the var data using an instance var rather than//	as a tag parameter because the tag parameter gets //	squashed to a string, and this way it is preserved	self->indentDec;	loop: (vars->size);		if: ((vars->(get:loop_count))->first)->(beginswith:'__') || 			(self->'fw_clearVars') >> ((vars->(get:loop_count))->first);						loop_continue;		else;			self->indentInc;			self->(showVar:@(vars->(get:loop_count)));			self->indentDec;		/if;	/loop;	'<h2>Global Variables:</h2>\r';	loop: (globals->size);		if: ((globals->(get:loop_count))->first)->(beginswith:'fw_') &&			(self->'fw_clearVars') !>> ((globals->(get:loop_count))->first);			self->indentInc;			self->(showVar:@(globals->(get:loop_count)), -globals);			self->indentDec;		/if;	/loop;/define_tag;//=============================================================================////	->showVar////	outputs a single var, or a comma separated list of vars//	called by programmer wherever this display is desired//	also called by showAll so that display formatting is only in one place////define_tag:'showVar',	-autooutput,	-required = 'theseVars',	-criteria = ((#theseVars->type == 'string') || (#theseVars->type == 'pair'));	local:		'useGlobals' 	= false,		'thisVar'		= null,		'thisVarType' 	= null,		'thisProperty' 	= pair,		'thisValue' 	= null;	(params->find:'-globals')->size		? local:'useGlobals' = true;	(#theseVars->type != 'pair')		? #theseVars = (self->splitComma: #theseVars)		| #theseVars = (array: #theseVars);	iterate: #theseVars, #thisVar;		//	this next block allows that the tag may be called from showAll		//	or may be called directly by providing only a variable name			if:	#thisVar->type != 'pair';			#useGlobals				? #thisVar = (pair: (#thisVar) = (globals->(find:#thisVar)))				| #thisVar = (pair: (#thisVar) = (vars->(find:#thisVar)));		/if;			#useGlobals			? #thisVarType	= (global:(#thisVar->first))->type			| #thisVarType	= (var:(#thisVar->first))->type;				if: (self->'typesNoDisplay') >> #thisVarType;					'<p style="padding: 10px 0 0 0; text-indent: '; (self->'indent'); 'px">'; 				#thisVar->first; ' - ('; #thisVarType; ')</p>';				else: (self->'typesPrimitive') >> #thisVarType;					'<p style="padding: 10px 0 0 0; text-indent: '; (self->'indent'); 'px">'; 				#thisVar->first; ' - '; output:(#thisVar->second); 				' <span style="color: #999999">('; #thisVarType; ')</span></p>';				else: (self->'typesCompound') >> #thisVarType;					'<p style="padding: 10px 0 0 0; text-indent: '; (self->'indent'); 'px">'; 				#thisVar->first; ' - ('; #thisVarType; ')-></p>';			#useGlobals			? self->(showValue: @(global:(#thisVar->first)))			| self->(showValue: @(var:(#thisVar->first)));			else; // custom type				'<p style="padding: 10px 0 0 0; text-indent: '; (self->'indent'); 'px">'; 				#thisVar->first; ' - (ctype: '; #thisVarType; ')-></p>';				if: #useGlobals;				iterate: ((global:(#thisVar->first))->properties)->first, #thisProperty;					self->(showVarOrGlobal:#thisProperty);				/iterate;			else;				iterate: ((var:(#thisVar->first))->properties)->first, #thisProperty;					self->(showVarOrGlobal:#thisProperty);				/iterate;			/if;		/if;	/iterate;/define_tag;//=============================================================================////	->showVarOrGlobal////	shared code in displaying Var or Global//	called internally only////define_tag:'showVarOrGlobal',	-autooutput,	-required = 'thisProperty',	-criteria = (#thisProperty->type == 'pair');	self->indentInc;	if: !((#thisproperty->first)->beginswith:'__');		self->(showValue: @#thisProperty);	/if;	self->indentDec;/define_tag;//=============================================================================////	->showValue////	shared recursive function to output a single value element//	called internally only////define_tag:'showValue',	-autooutput,	-optional = 'thisVal';	local:		'thisValType' 	= (local:'thisVal')->type,		'thisElement'	= null,		'thisProperty'	= null;	if: (self->'typesNoDisplay') >> #thisValType;			'<p style="padding: 0 0 0 0; text-indent: '; (self->'indent'); 'px">'; 		'('; #thisValType; ')</p>';		else: (#thisValType == 'pair') &&			((self->'typesPrimitive') >> ((#thisVal->get:1)->type)) &&			((self->'typesPrimitive') >> ((#thisVal->get:2)->type));		'<p style="padding: 0 0 0 0; text-indent: '; (self->'indent'); 'px">'; 		(#thisVal->get:1); ' <span style="color: #999999">('; (#thisVal->get:1)->type; ')</span>';		' = '; 		output:(#thisVal->get:2); ' <span style="color: #999999">('; (#thisVal->get:2)->type; ')</span>';		'</p>';	else: (#thisValType == 'pair') &&			((self->'typesPrimitive') >> ((#thisVal->get:1)->type)) &&			((self->'typesCompound') >> ((#thisVal->get:2)->type));		'<p style="padding: 0 0 0 0; text-indent: '; (self->'indent'); 'px">'; 		(#thisVal->get:1); ' = ('; (#thisVal->get:2)->type; ')-></p>';				iterate: #thisVal->get:2, #thisElement;			self->indentInc;			self->(showValue: @#thisElement);			self->indentDec;		/iterate;	else: (self->'typesPrimitive') >> #thisValType;		'<p style="padding: 0 0 0 0; text-indent: '; (self->'indent'); 'px">'; 		output:(#thisVal); ' <span style="color: #999999">('; #thisValType; ')</span></p>';		else: (self->'typesCompound') >> #thisValType;			if: (self->'indent') != 0;			'<p style="padding: 0 0 0 0; text-indent: '; (self->'indent'); 'px">'; 			' ('; #thisValType; ')-></p>';		/if;			iterate: #thisVal, #thisElement;			self->indentInc;			self->(showValue: @#thisElement);			self->indentDec;		/iterate;	else; // custom type		if: (self->'indent') != 0;			'<p style="padding: 0 0 0 0; text-indent: '; (self->'indent'); 'px">'; 			' (ctype: '; #thisValType; ')-></p>';		/if;			iterate: (#thisVal->properties)->first, #thisProperty;			self->(showVarOrGlobal:#thisProperty);		/iterate;	/if;/define_tag;/define_type;?>