<?lassoscript
//............................................................................
//
//	pageblocks: (c) 2002-2007 http://www.pageblocks.org/
//
//............................................................................
/*

	{fileName=		rankEngine_mysqlmod.ctyp }
	{rsrcType=		type }
	{rsrcName=		rankEngine_mysqlmod }
	{rsrcHTTP=		 }

	{lassoVrsnMin=	8.1.0 }
	{lassoVrsnMax=	8.5.3 }

	{author=		Greg Willits }
	{authorEmail=	subscribe to pbTalk at www.pageblocks.org/talk/ }
	{authorHTTP=	www.pageblocks.org }

	{desc=			implements one particular Nemoy Rank Engine.
	 				Derived from MySQL full-text search formula with some
	 				modification due to performance considerations.  }

	{maintvsrn=		1.1 }
	{maintrelease=	5.2.0 }
	{maintdate=		2007-05-23 }
	{maintauthor=	Greg Willits }
	{maintnotes=	added lemmatization }

	{maintvsrn=		1.0 }
	{maintrelease=	5.2.0 }
	{maintdate=		2007-05-18 }
	{maintauthor=	Greg Willits }
	{maintnotes=	initial release }

*/
//.............................................................................

define_type: 'rankEngine_mysqlmod';


//==============================================================================
//	->calcRelevanceOf
//	
//
//------------------------------------------------------------------------------

define_tag:'calcRelevanceOf',
	-required = 'records',
	-required = 'allCount',
	-required = 'searchTerms',
	-required = 'contentFields',
	-required = 'contentWeights',
	-required = 'lemmaWeight';
	

	$fw_timer->(start:'calcRanking');

	local:
		'recordCount'	= #records->size,
		'searchWords'	= #searchTerms->find:'searchWords',
		'lemmaWords'	= #searchTerms->find:'lemmaWords';
		
	local:'searchAndLemmaWords' = #searchTerms->(find:'searchWords');
	#searchAndLemmaWords->(merge: #lemmaWords);

	#contentFields 	= (fwpCnfg_splitComma:#contentFields);

	if: #recordCount;

		local:
			'localFactor'		= decimal,
			'termFactor'		= decimal,
			'uniqueFactor' 		= decimal,
			'importance'		= integer,
			'globalFactor'		= decimal,
			'thisRecord' 		= pair,
			'termCount'			= integer,
			'thisWord'			= string,
			'fieldName'			= string,
			'fieldContent'		= string,
			'fieldweight'		= integer,
			'wordIsLemma'		= boolean,
			'wordCount'			= decimal,
	
			'words' 			= array,
			'wordsCount' 		= integer,
			'uniqueWords' 		= array,
			'uniqueCount' 		= integer,
			'uniqueWordsCount' 	= integer,
			
			'firstTermImportanceFactor'		= 3,
			'secondTermImportanceFactor' 	= 2,
			'extraTermImportanceFactor' 	= 1;		
			
		#globalFactor = math_log:((#allCount - #recordCount)/#recordCount);
	
		iterate: #records, #thisRecord;
	
			#termCount = 0;
			#termFactor = 0;
			#uniqueFactor = 1;
	
			loop_count == 1 ? #importance = #firstTermImportanceFactor;
			loop_count == 2 ? #importance = #secondTermImportanceFactor;
			loop_count > 2	? #importance = #extraTermImportanceFactor;
			
			iterate: #contentFields, #fieldName;
	
				#fieldContent 		= (#thisRecord->second)->find:#fieldName;
				#words 				= (string_findRegExp: #fieldContent, -find='\\b\\w{4,}?\\b');
				#wordsCount 		= #words->size;
				#uniqueWords->(insertfrom:(iterator:#words));
				#uniqueWordsCount	= #uniqueWords->size;
				#wordIsLemma 		= false;

				#fieldWeight = #contentWeights->(find:#fieldName);
		
				iterate: #searchAndLemmaWords, #thisWord;
					// prevent regex injection/crashes by escaping special characters
					('!@#$%^&*()-[{<.,:;|`' >> #thisWord) ? #thisWord = '\\' + #thisWord;
		
					#wordCount += (string_findRegExp:
						#fieldContent,
						-find = #thisWord,
						-ignorecase)->size;

					#wordIsLemma
						? #termCount += (#wordCount * #lemmaWeight)
						| #termCount += #wordCount;
		
					#termFactor += (math_log:(#termCount)+1) * #importance;
				/iterate;

				#termFactor = #termFactor * #fieldWeight;
		
//	supposed to be more accurate, but _very_ expensive for results with large data sets
//	and I think I like the results better w/o it

//				iterate: #uniqueWords, #thisWord;
//					#uniqueCount = (string_findRegExp:
//						#fieldContent,
//						-find = #thisWord,
//						-ignorecase)->size;
//					#uniqueFactor += (math_log:(#uniqueCount)+1);
//				/iterate;
		
			/iterate;

			#localFactor = (#termFactor / #uniqueFactor) * (#uniqueWordsCount / (1+(0.0115 * #uniqueWordsCount)));
		
			#thisRecord->first = (#localFactor * #globalFactor);

		/iterate;

		$fw_timer->(stop:'calcRanking');
	
	/if;

	
/define_tag;

/define_type;
?>
